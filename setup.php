<?php
// ---
// setup.php - Document Management System Auto-Installer
// Run this script once from your browser to set up the database and config file.
// ---

// --- Configuration ---
// Database credentials. Change these if your MySQL setup is different.
$db_host = '127.0.0.1';
$db_user = 'root';
$db_pass = ''; // Default XAMPP/WAMP password is empty
$db_name = 'docms_db'; // The name for the new database

// Admin account details
$admin_fullname = 'Administrator';
$admin_email = 'admin@example.com';
$admin_user = 'admin';
$admin_pass = 'Admin@123!'; // Please change this after your first login

// --- End of Configuration ---

// --- Main Script ---
header('Content-Type: text/plain');

if (php_sapi_name() === 'cli') {
    echo "This script is designed to be run from a web browser. Please access it via http://your-local-server/setup.php";
    exit;
}

echo "--- Document Management System Installer ---\n\n";

// --- Step 1: Connect to MySQL and Create Database ---
try {
    echo "Step 1: Connecting to MySQL server...";
    $pdo = new PDO("mysql:host=$db_host", $db_user, $db_pass, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
    ]);
    echo "OK\n";

    echo "Step 2: Creating database '$db_name' if it doesn't exist...";
    $pdo->exec("CREATE DATABASE IF NOT EXISTS `$db_name` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
    $pdo->exec("USE `$db_name`");
    echo "OK\n";

} catch (PDOException $e) {
    echo "FAILED\n";
    echo "Error: Could not connect to MySQL or create the database.\n";
    echo "Message: " . $e->getMessage() . "\n";
    echo "\nPlease check your database credentials (`\$db_host`, `\$db_user`, `\$db_pass`) at the top of this script.\n";
    exit;
}

// --- Step 2: Create Tables from Schema File ---
try {
    echo "Step 3: Reading database schema from sql/schema.sql...";
    $schema_path = __DIR__ . '/sql/schema.sql';
    if (!file_exists($schema_path)) {
        throw new Exception("sql/schema.sql not found. Make sure the file exists in the 'sql' directory.");
    }
    $sql_schema = file_get_contents($schema_path);
    echo "OK\n";

    echo "Step 4: Executing schema to create tables...";
    $pdo->exec($sql_schema);
    echo "OK\n";

} catch (Exception $e) {
    echo "FAILED\n";
    echo "Error: " . $e->getMessage() . "\n";
    exit;
}

// --- Step 3: Insert Default Permissions ---
try {
    echo "Step 5: Inserting default permissions...";

    // Define default permissions. Using INSERT IGNORE to prevent errors if they already exist.
    $permissions_to_insert = ['view', 'edit', 'delete', 'owner'];
    $stmt = $pdo->prepare("INSERT IGNORE INTO permissions (permission_name) VALUES (?)");

    $inserted_count = 0;
    foreach ($permissions_to_insert as $perm) {
        $stmt->execute([$perm]);
        if ($stmt->rowCount() > 0) {
            $inserted_count++;
        }
    }

    if ($inserted_count > 0) {
        echo "OK ($inserted_count permissions inserted).\n";
    } else {
        echo "SKIPPED (Permissions likely already exist).\n";
    }

} catch (PDOException $e) {
    echo "FAILED\n";
    echo "Error: Could not insert default permissions.\n";
    echo "Message: " . $e->getMessage() . "\n";
    exit;
}

// --- Step 4: Create Initial Admin User ---
try {
    echo "Step 6: Creating initial admin user...";

    // Check if admin already exists
    $stmt = $pdo->prepare("SELECT id FROM users WHERE username = ? OR email = ?");
    $stmt->execute([$admin_user, $admin_email]);

    if ($stmt->fetch()) {
        echo "SKIPPED (Admin user already exists).\n";
    } else {
        $hashed_password = password_hash($admin_pass, PASSWORD_DEFAULT);
        $stmt = $pdo->prepare(
            'INSERT INTO users (username, password, email, fullname) VALUES (?, ?, ?, ?)'
        );
        $stmt->execute([$admin_user, $hashed_password, $admin_email, $admin_fullname]);
        echo "OK\n";
        echo "   - Username: $admin_user\n";
        echo "   - Password: $admin_pass\n";
    }

} catch (PDOException $e) {
    echo "FAILED\n";
    echo "Error: Could not create admin user.\n";
    echo "Message: " . $e->getMessage() . "\n";
    exit;
}

// --- Step 5: Create and Write config.php ---
echo "Step 7: Preparing config.php file...";

// Auto-detect Base URL
$base_url = 'http://' . $_SERVER['HTTP_HOST'] . rtrim(dirname($_SERVER['REQUEST_URI']), '/\\');

$config_content = <<<PHP
<?php
// config.php - Database and application configuration
// This file is auto-generated by setup.php. Do not edit manually.

return [
    'db_host' => '$db_host',
    'db_name' => '$db_name',
    'db_user' => '$db_user',
    'db_pass' => '$db_pass', // Note: Storing passwords in config is not ideal for production.
    'base_url' => '$base_url'
];
PHP;
echo "OK\n";

$config_dir = __DIR__ . '/config';
$config_path = $config_dir . '/config.php';

echo "Step 8: Writing config file to '$config_path'...";

if (!is_dir($config_dir)) {
    if (!@mkdir($config_dir, 0755, true)) {
        echo "FAILED\n";
        echo "Error: Could not create the 'config' directory. Please create it manually.\n";
        exit;
    }
}

$written = @file_put_contents($config_path, $config_content);

if ($written === false) {
    echo "FAILED\n\n";
    echo "****************************** MANUAL ACTION REQUIRED ******************************\n";
    echo "Could not write to '$config_path'. This is usually a file permissions issue.\n";
    echo "Please create the file manually with the following content:\n\n";
    echo "--------------------------------- config.php ---------------------------------\n";
    echo htmlspecialchars($config_content);
    echo "\n--------------------------------------------------------------------------\n\n";
} else {
    echo "OK\n";
}

// --- Final Step: Cleanup and Instructions ---
echo "\n--- SETUP COMPLETE! ---\n\n";
echo "Next Steps:\n";
echo "1. For security, please DELETE or RENAME this 'setup.php' file now.\n";
echo "2. Visit the application homepage: $base_url/public/\n";
echo "3. Log in with the admin credentials you created.\n";

exit;
?>